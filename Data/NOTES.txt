Leaving plots out of github, doesn't make sense to version control and can always reproduce later.

12_07_12_31_PM:
	arith for C and ML has a=20000,b=3000. For grain: a=210,b=75
	alltrees: C/ML=10, Grain=7
	composition: 100 for ML and Grain, Not present for C
	funcrec: 10000 iterations for C/ML, 1000 for grain. 

---  MEMORY ---
C, ML and Grain are all deterministic for memory usage, JS is only one where variance needs measuring.
Standard deviation as percentage of mean for each JS program:
	alltrees=0.11%
	arith=0.17%
	funcrec=0.16%
	composition=2.6%

Means were (in ascending order): [135328, 143248, 772472, 13559956]
Span almost exactly 2 orders of magnitude so probably quite reliable.
Worst was 2.6% variance with most much lower (composition had lowest mean memory so expect higher variance)
suggesting that this is a sensible way to measure data.


--- TIME ---
Normalised variance ranges from 0.7% (composition in Grain) to 10% (funcrec in C)
Most are around 1-3% which seems reasonable. Can always collect extra data manually for outliers.
Note that 0.7% corresponds to Grain taking 3370ms average, only higher one is OCaml arith at 9620.
Also, 10% one corresponds to C only taking 0.5ms on average, so low it is probably all just overhead anyway.

First plot: Remember that arith has been made far simpler for grain so it doesn't crash. Grain by far the worst


--------------------

FullCollection_08_12 - file names/iterations standardised so can be compared directly. Add C composition using closures
Run with 10 iterations each, took about 7.5 mins.
From now on, only run for 5 iterations, can run more iterations to get more certainty at end of project, not every time

compareoptsLocals - None/Ir/Graph/all optimisations. 5 passes of each stage. Optimised pattern matching ON.
  Ir opts:  OptConstants, OptFails, OptCSE, OptDeadAssignments, ClearAnnotations
  Graph opts: OptWasmPeephole, Deadlocals, OptWasmDrop
  Closures store all free variables, globals used purely for exports.

compareoptsGlobals - The same but with optimisation to avoid putting globals in closures.
  To be compared against compareoptsLocals and each pass against the other sets of passes.
  Globals used for toplevel variables to avoid putting them in closures, accessed the same way.
  (GraphGlobal and AllGlobal further enable OptimiseGlobals)

pats_01_03_22_19 - all passes enabled with 5 iterations, same set as in compareoptsLocals,
  old vs optimised pattern matching algorithm.

competitors_without_opts - Ocaml (unoptimised), Grain, Js and C all compared on just the tests they have in common

opts_12_30_13_36 - Comparison of None/IR/Graph/All opts. No inlining or tail calls.
opts_01_13_12_46 - Comparison of None/IR/Graph/All opts (with pattern matching optimised on all).
	new data is that tailcall optimisation and inlining were added on this version.

newclosures - like opts_01_13_12_46 but with modified implementation of closures to reduce copying/function calls


opts_tupled - Functions which are never underapplied or passed around get rewritten to take a single tuple arg rather than curry.
	Results: Filesize decreases by a couple percent in some cases. Execution time (primarily for funcrec) appears
		 to have decreased, but too variable to be certain. 
		(May want to run on larger set of test programs to prove purpose e.g. function with many parameters)
