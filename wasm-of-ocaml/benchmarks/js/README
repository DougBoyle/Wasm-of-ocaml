To run code produced by Js_of_ocaml:

1. add `open Js_of_ocaml` to top of ML file
2. add to end of file:
let _ =
  Js.export_all
    (object%js
       method add x y = x +. y
       method abs x = abs_float x
       val zero = 0.
     end)

Can access from node js, see https://ocsigen.org/js_of_ocaml/3.1.0/manual/rev-bindings.
e.g. `var math = require("./math.js"); math.add(2, 3)`.

3. Compile to bytecode using `ocamlfind ocamlc -g -o myfile.byte -linkpkg -package js_of_ocaml,js_of_ocaml-ppx myfile.ml`
(See https://medium.com/@vietlq/playing-with-js-of-ocaml-f3e99f9afb1f)
4. Convert to js with `js_of_ocaml myfile.byte`
5. To access within browser, need a html file which loads that js file (or just run it from node instead)

Note: Adding open Js_of_ocaml/Js.export_all not actually necessary to execute code, just to export it.
Will be compiled to a function which gets called immediately, so computation still happens it just isn't exported.
Doesn't visibly affect performance

Have tested with large values in arith.ml, let _ = <large computation> isn't optimised away, just very fast in JS_of_ocaml