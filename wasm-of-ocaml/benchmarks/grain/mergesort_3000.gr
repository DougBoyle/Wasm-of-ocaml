let rec merge = (lx) => (ly) => {match ((lx, ly)){
  ([], _) => ly,
  (_, []) => lx,
  ([x, ...xs], [y, ...ys])  => if (x < y) {[x, ...(merge(xs)(ly))]} else {[y, ...(merge(lx)(ys))]}
}}

let rec split = (l1, l2, l) => {match (l){
  [] => (l1, l2),
  [x, ...xs] => split([x, ...l2], l1, xs)
}}

let rec mergesort = l => {match (l){
  [] => [],
  [x] => [x],
  [x, ...xs] => {
   let (l1, l2) = split([], [], l)
   merge(mergesort(l1))(mergesort(l2))
  }
}}

let a = 214013
let c = 2531011
let m = 65536
// can use 'mut' keyword rather than declaring a new type
let mut x = 12345
let rand = (n) => {
    x = ((a*x + c) % m)
    x % n
}

let init = n => m => {
  let rec help = (i) => (n) => {
    if (i == n) {[]} else {[rand(m), ...(help(i+1)(n))]}
  }
  help(0)(n)
}

let n = 3000
let m = 10000
let l = init(n)(m)
let sorted_l = mergesort(l)
export l, sorted_l
